<div class="box b1 container lucida-grande margin-top-5 h-center">
  <div class="mobile-box container">
    <div class="mobile-box lucida-grande bold rem10 text-shadow margin-right-5 padding-10 v-center">Tarefa ativa</div>
    <img class="image-prop size-20 v-center" src="/images/icon/active-task.png">
  </div>
</div>
<div id="active-task-box" class="box b1 container max-height-400 scroll-y h-center"></div>

<script>
  document.addEventListener("DOMContentLoaded", async () => {
    await updateActiveTaskBox();
  });

  async function updateActiveTaskBox() {
    let active_task_box = document.getElementById("active-task-box");
    active_task_box.innerHTML = "";

    let active_tasks = await taskFilter({
      status: 'Em execução'
    });

    if (!active_tasks.length) {
      active_task_box.append(lib.element.create("div", {
        class: "box b1 lucida-grande bold padding-20 center"
      }, "Nenhuma tarefa"));
      return;
    }

    let milestones = await API.response(Milestone.filter, {});

    active_tasks.forEach(active_task => {
      let active_task_div = activeTaskDiv(active_task, milestones);
      active_task_box.append(active_task_div);
    });
  };

  function activeTaskDiv(active_task, milestones) {
    let active_task_div = lib.element.create("div", {
      class: "box b2-3 container ground border shadow-st padding-5 margin-top-5"
    });

    let option_div = lib.element.create("div", {
      class: "container b1 right padding-3"
    });
    active_task_div.append(option_div);

    let milestone_select = lib.element.create("select", {
      class: "milestone-select mobile-box b7-10 lucida-grande rem08 border padding-3 v-center"
    });
    option_div.append(milestone_select);

    let default_option = lib.element.create("option", {
      value: "",
    }, "Selecione uma meta");
    milestone_select.append(default_option);

    milestones.forEach(milestone => {
      let option = lib.element.create("option", {
        value: milestone.id
      }, milestone.description);
      milestone_select.append(option);
    });

    milestone_select.value = active_task.milestone_id || "";

    let update_icon = lib.element.icon("b10 opacity-out-08 pointer",
      "20", "/images/icon/return.png");
    option_div.append(update_icon);

    let delete_icon = lib.element.icon("b10 opacity-out-08 pointer",
      "20", "/images/icon/trash.png");
    option_div.append(delete_icon);

    let done_icon = lib.element.icon("b10 opacity-out-08 pointer",
      "20", "/images/icon/done.png");
    option_div.append(done_icon);

    let active_task_text = lib.element.create("textarea", {
      class: "mobile-box b1 lucida-grande rem08 border padding-3 v-center",
      'data-initial_value': active_task.description
    }, active_task.description);
    active_task_div.append(active_task_text);

    // events
    done_icon.addEventListener("click", async () => {
      lib.confirm("Deseja concluir a tarefa?", async r => {
        if (!r) { return; }

        let updated_task = {
          id: active_task.id,
          status: "Concluído"
        };

        let response = await API.response(Task.update, updated_task);
        if (!response.done) { return; }

        lib.message(response.done, () => {
          active_task_div.remove();
        });
      });
    });

    active_task_text.addEventListener("blur", async () => {
      if (active_task_text.value === active_task_text.dataset.initial_value) {
        return;
      }

      if (!active_task_text.value) {
        active_task_text.value = active_task_text.dataset.initial_value;
        return lib.message("A tarefa não pode ser vazia.");
      }

      lib.confirm("Deseja atualizar a tarefa?", async r => {
        if (!r) { return; }

        let updated_task = {
          id: active_task.id,
          description: active_task_text.value,
        };

        let response = await API.response(Task.update, updated_task);
        if (!response) { return; }

        lib.message(response.done, () => {
          active_task_text.dataset.initial_value = active_task_text.value;
        });
      });
    });

    update_icon.addEventListener("click", async () => {
      lib.confirm("Deseja atualizar o objetivo?", async r => {
        if (!r) { return; }

        let updated_task = {
          id: active_task.id,
          status: "Pendente"
        };

        let response = await API.response(Task.update, updated_task);
        if (!response.done) { return; }

        let task_box = document.getElementById("task-box");

        active_task.status = "Pendente";

        let task_div = taskDiv({
          ...active_task,
        }, milestones);

        task_box.append(task_div);
        active_task_div.remove();
      });
    });

    milestone_select.addEventListener("change", async () => {
      let task_updated = {
        id: active_task.id,
        milestone_id: milestone_select.value
      };

      let response = await API.response(Task.update, task_updated, milestone_select);
      if (!response.done) { return; }

      active_task.milestone_id = milestone_select.value;
    });

    delete_icon.addEventListener("click", async () => {
      lib.confirm("Deseja excluir a tarefa?", async r => {
        if (r) { return; }

        let response = await API.response(Task.delete, active_task.id);
        lib.message(response, () => {
          active_task_div.remove();
        });
      }, "Não excluir", "Excluir tarefa");
    });

    return active_task_div;
  };
</script>